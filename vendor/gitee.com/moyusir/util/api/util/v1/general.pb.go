// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: api/util/v1/general.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/go-kratos/kratos/v2/errors"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 错误原因定义
type ErrorReason int32

const (
	// 违反预警规则
	ErrorReason_REGISTER_FORMAT_NONSTANDARD ErrorReason = 0
	// api网关连接失败
	ErrorReason_API_GATEWAY_CONNECT_FAIL ErrorReason = 1
	// 报文未正常发送
	ErrorReason_REQUEST_SEND_FAIL ErrorReason = 2
)

// Enum value maps for ErrorReason.
var (
	ErrorReason_name = map[int32]string{
		0: "REGISTER_FORMAT_NONSTANDARD",
		1: "API_GATEWAY_CONNECT_FAIL",
		2: "REQUEST_SEND_FAIL",
	}
	ErrorReason_value = map[string]int32{
		"REGISTER_FORMAT_NONSTANDARD": 0,
		"API_GATEWAY_CONNECT_FAIL":    1,
		"REQUEST_SEND_FAIL":           2,
	}
)

func (x ErrorReason) Enum() *ErrorReason {
	p := new(ErrorReason)
	*p = x
	return p
}

func (x ErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_api_util_v1_general_proto_enumTypes[0].Descriptor()
}

func (ErrorReason) Type() protoreflect.EnumType {
	return &file_api_util_v1_general_proto_enumTypes[0]
}

func (x ErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorReason.Descriptor instead.
func (ErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_api_util_v1_general_proto_rawDescGZIP(), []int{0}
}

// 可选的数据注册类型
type Type int32

const (
	Type_DOUBLE    Type = 0
	Type_INT32     Type = 1
	Type_INT64     Type = 2
	Type_UINT32    Type = 3
	Type_UINT64    Type = 4
	Type_BOOL      Type = 5
	Type_STRING    Type = 6
	Type_BYTE      Type = 7
	Type_TIMESTAMP Type = 8
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "DOUBLE",
		1: "INT32",
		2: "INT64",
		3: "UINT32",
		4: "UINT64",
		5: "BOOL",
		6: "STRING",
		7: "BYTE",
		8: "TIMESTAMP",
	}
	Type_value = map[string]int32{
		"DOUBLE":    0,
		"INT32":     1,
		"INT64":     2,
		"UINT32":    3,
		"UINT64":    4,
		"BOOL":      5,
		"STRING":    6,
		"BYTE":      7,
		"TIMESTAMP": 8,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_util_v1_general_proto_enumTypes[1].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_api_util_v1_general_proto_enumTypes[1]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_api_util_v1_general_proto_rawDescGZIP(), []int{1}
}

// 日志级别
type LogLevel int32

const (
	// 调试
	LogLevel_DEBUG LogLevel = 0
	// 信息
	LogLevel_INFO LogLevel = 1
	// 警告
	LogLevel_WARNING LogLevel = 2
	// 错误
	LogLevel_ERROR LogLevel = 3
	// 在dev环境下，该日志级别打印后会触发panic
	LogLevel_DEV_PANIC LogLevel = 4
	// panic
	LogLevel_PANIC LogLevel = 5
	// 致命错误
	LogLevel_FATAL LogLevel = 6
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "DEBUG",
		1: "INFO",
		2: "WARNING",
		3: "ERROR",
		4: "DEV_PANIC",
		5: "PANIC",
		6: "FATAL",
	}
	LogLevel_value = map[string]int32{
		"DEBUG":     0,
		"INFO":      1,
		"WARNING":   2,
		"ERROR":     3,
		"DEV_PANIC": 4,
		"PANIC":     5,
		"FATAL":     6,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_api_util_v1_general_proto_enumTypes[2].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_api_util_v1_general_proto_enumTypes[2]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_api_util_v1_general_proto_rawDescGZIP(), []int{2}
}

// 预警比较方法，用于预警检测时的判断
type DeviceStateRegisterInfo_Cmp int32

const (
	// 等于
	DeviceStateRegisterInfo_EQ DeviceStateRegisterInfo_Cmp = 0
	// 大于
	DeviceStateRegisterInfo_GT DeviceStateRegisterInfo_Cmp = 1
	// 小于
	DeviceStateRegisterInfo_LT DeviceStateRegisterInfo_Cmp = 2
)

// Enum value maps for DeviceStateRegisterInfo_Cmp.
var (
	DeviceStateRegisterInfo_Cmp_name = map[int32]string{
		0: "EQ",
		1: "GT",
		2: "LT",
	}
	DeviceStateRegisterInfo_Cmp_value = map[string]int32{
		"EQ": 0,
		"GT": 1,
		"LT": 2,
	}
)

func (x DeviceStateRegisterInfo_Cmp) Enum() *DeviceStateRegisterInfo_Cmp {
	p := new(DeviceStateRegisterInfo_Cmp)
	*p = x
	return p
}

func (x DeviceStateRegisterInfo_Cmp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceStateRegisterInfo_Cmp) Descriptor() protoreflect.EnumDescriptor {
	return file_api_util_v1_general_proto_enumTypes[3].Descriptor()
}

func (DeviceStateRegisterInfo_Cmp) Type() protoreflect.EnumType {
	return &file_api_util_v1_general_proto_enumTypes[3]
}

func (x DeviceStateRegisterInfo_Cmp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceStateRegisterInfo_Cmp.Descriptor instead.
func (DeviceStateRegisterInfo_Cmp) EnumDescriptor() ([]byte, []int) {
	return file_api_util_v1_general_proto_rawDescGZIP(), []int{2, 0}
}

// 数据聚合规则
type DeviceStateRegisterInfo_AggregationOperation int32

const (
	// 取平均值
	DeviceStateRegisterInfo_AVG DeviceStateRegisterInfo_AggregationOperation = 0
	// 取最大值
	DeviceStateRegisterInfo_MAX DeviceStateRegisterInfo_AggregationOperation = 1
	// 取最小值
	DeviceStateRegisterInfo_MIN DeviceStateRegisterInfo_AggregationOperation = 2
	// 取总和
	DeviceStateRegisterInfo_SUM DeviceStateRegisterInfo_AggregationOperation = 3
	// 不进行数据聚合
	DeviceStateRegisterInfo_NONE DeviceStateRegisterInfo_AggregationOperation = 4
)

// Enum value maps for DeviceStateRegisterInfo_AggregationOperation.
var (
	DeviceStateRegisterInfo_AggregationOperation_name = map[int32]string{
		0: "AVG",
		1: "MAX",
		2: "MIN",
		3: "SUM",
		4: "NONE",
	}
	DeviceStateRegisterInfo_AggregationOperation_value = map[string]int32{
		"AVG":  0,
		"MAX":  1,
		"MIN":  2,
		"SUM":  3,
		"NONE": 4,
	}
)

func (x DeviceStateRegisterInfo_AggregationOperation) Enum() *DeviceStateRegisterInfo_AggregationOperation {
	p := new(DeviceStateRegisterInfo_AggregationOperation)
	*p = x
	return p
}

func (x DeviceStateRegisterInfo_AggregationOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceStateRegisterInfo_AggregationOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_api_util_v1_general_proto_enumTypes[4].Descriptor()
}

func (DeviceStateRegisterInfo_AggregationOperation) Type() protoreflect.EnumType {
	return &file_api_util_v1_general_proto_enumTypes[4]
}

func (x DeviceStateRegisterInfo_AggregationOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceStateRegisterInfo_AggregationOperation.Descriptor instead.
func (DeviceStateRegisterInfo_AggregationOperation) EnumDescriptor() ([]byte, []int) {
	return file_api_util_v1_general_proto_rawDescGZIP(), []int{2, 1}
}

// 用户注册信息
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id，须为长度3到12的小写字母加数字以及_组成的字符串，为snake case形式
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 用户密码，长度6位到12位，由大小写字母加数字组成的字符串
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_util_v1_general_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_api_util_v1_general_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_api_util_v1_general_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// 配置注册信息
type DeviceConfigRegisterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 单个设备的配置注册信息包含若干配置字段
	// 每台设备至少注册一个字段，至多注册六个字段
	Fields []*DeviceConfigRegisterInfo_Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *DeviceConfigRegisterInfo) Reset() {
	*x = DeviceConfigRegisterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_util_v1_general_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConfigRegisterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConfigRegisterInfo) ProtoMessage() {}

func (x *DeviceConfigRegisterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_util_v1_general_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConfigRegisterInfo.ProtoReflect.Descriptor instead.
func (*DeviceConfigRegisterInfo) Descriptor() ([]byte, []int) {
	return file_api_util_v1_general_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceConfigRegisterInfo) GetFields() []*DeviceConfigRegisterInfo_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

// 设备状态注册信息
type DeviceStateRegisterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备状态信息的字段，每台设备至少注册一个字段，至多注册六个字段
	Fields []*DeviceStateRegisterInfo_Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *DeviceStateRegisterInfo) Reset() {
	*x = DeviceStateRegisterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_util_v1_general_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStateRegisterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStateRegisterInfo) ProtoMessage() {}

func (x *DeviceStateRegisterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_util_v1_general_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStateRegisterInfo.ProtoReflect.Descriptor instead.
func (*DeviceStateRegisterInfo) Descriptor() ([]byte, []int) {
	return file_api_util_v1_general_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceStateRegisterInfo) GetFields() []*DeviceStateRegisterInfo_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

// 警告信息
type Warning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备类别号
	DeviceClassId int32 `protobuf:"varint,1,opt,name=device_class_id,json=deviceClassId,proto3" json:"device_class_id,omitempty"`
	// 引发告警的设备的id，要求不能为空
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// 设备字段，要求不能为空
	DeviceFieldName string `protobuf:"bytes,3,opt,name=device_field_name,json=deviceFieldName,proto3" json:"device_field_name,omitempty"`
	// 告警信息，要求不能为空
	WarningMessage string `protobuf:"bytes,4,opt,name=warning_message,json=warningMessage,proto3" json:"warning_message,omitempty"`
	// 告警出现的时间范围，要求不能为空
	Start *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start,proto3" json:"start,omitempty"`
	End   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end,proto3" json:"end,omitempty"`
	// 标志警告信息是否已经处理的标志位
	Processed bool `protobuf:"varint,7,opt,name=processed,proto3" json:"processed,omitempty"`
}

func (x *Warning) Reset() {
	*x = Warning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_util_v1_general_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Warning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Warning) ProtoMessage() {}

func (x *Warning) ProtoReflect() protoreflect.Message {
	mi := &file_api_util_v1_general_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Warning.ProtoReflect.Descriptor instead.
func (*Warning) Descriptor() ([]byte, []int) {
	return file_api_util_v1_general_proto_rawDescGZIP(), []int{3}
}

func (x *Warning) GetDeviceClassId() int32 {
	if x != nil {
		return x.DeviceClassId
	}
	return 0
}

func (x *Warning) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Warning) GetDeviceFieldName() string {
	if x != nil {
		return x.DeviceFieldName
	}
	return ""
}

func (x *Warning) GetWarningMessage() string {
	if x != nil {
		return x.WarningMessage
	}
	return ""
}

func (x *Warning) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Warning) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Warning) GetProcessed() bool {
	if x != nil {
		return x.Processed
	}
	return false
}

// 测试中使用的设备状态信息和设备配置信息
type TestedDeviceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status bool   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TestedDeviceConfig) Reset() {
	*x = TestedDeviceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_util_v1_general_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestedDeviceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestedDeviceConfig) ProtoMessage() {}

func (x *TestedDeviceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_util_v1_general_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestedDeviceConfig.ProtoReflect.Descriptor instead.
func (*TestedDeviceConfig) Descriptor() ([]byte, []int) {
	return file_api_util_v1_general_proto_rawDescGZIP(), []int{4}
}

func (x *TestedDeviceConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestedDeviceConfig) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type TestedDeviceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Time        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Voltage     float64                `protobuf:"fixed64,3,opt,name=voltage,proto3" json:"voltage,omitempty"`
	Current     float64                `protobuf:"fixed64,4,opt,name=current,proto3" json:"current,omitempty"`
	Temperature float64                `protobuf:"fixed64,5,opt,name=temperature,proto3" json:"temperature,omitempty"`
}

func (x *TestedDeviceState) Reset() {
	*x = TestedDeviceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_util_v1_general_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestedDeviceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestedDeviceState) ProtoMessage() {}

func (x *TestedDeviceState) ProtoReflect() protoreflect.Message {
	mi := &file_api_util_v1_general_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestedDeviceState.ProtoReflect.Descriptor instead.
func (*TestedDeviceState) Descriptor() ([]byte, []int) {
	return file_api_util_v1_general_proto_rawDescGZIP(), []int{5}
}

func (x *TestedDeviceState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestedDeviceState) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TestedDeviceState) GetVoltage() float64 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *TestedDeviceState) GetCurrent() float64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *TestedDeviceState) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

// 配置注册信息字段
type DeviceConfigRegisterInfo_Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 配置字段名，长度为1到12位的小写字母加数字以及_组成的字符串
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 配置字段类型
	Type Type `protobuf:"varint,2,opt,name=type,proto3,enum=api.util.v1.Type" json:"type,omitempty"`
}

func (x *DeviceConfigRegisterInfo_Field) Reset() {
	*x = DeviceConfigRegisterInfo_Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_util_v1_general_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConfigRegisterInfo_Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConfigRegisterInfo_Field) ProtoMessage() {}

func (x *DeviceConfigRegisterInfo_Field) ProtoReflect() protoreflect.Message {
	mi := &file_api_util_v1_general_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConfigRegisterInfo_Field.ProtoReflect.Descriptor instead.
func (*DeviceConfigRegisterInfo_Field) Descriptor() ([]byte, []int) {
	return file_api_util_v1_general_proto_rawDescGZIP(), []int{1, 0}
}

func (x *DeviceConfigRegisterInfo_Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceConfigRegisterInfo_Field) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_DOUBLE
}

// 预警比较规则，由比较方法和比较参数组成
type DeviceStateRegisterInfo_CmpRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmp DeviceStateRegisterInfo_Cmp `protobuf:"varint,1,opt,name=cmp,proto3,enum=api.util.v1.DeviceStateRegisterInfo_Cmp" json:"cmp,omitempty"`
	// 预警比较方法对应的参数，必须只能为数字
	Arg string `protobuf:"bytes,2,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (x *DeviceStateRegisterInfo_CmpRule) Reset() {
	*x = DeviceStateRegisterInfo_CmpRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_util_v1_general_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStateRegisterInfo_CmpRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStateRegisterInfo_CmpRule) ProtoMessage() {}

func (x *DeviceStateRegisterInfo_CmpRule) ProtoReflect() protoreflect.Message {
	mi := &file_api_util_v1_general_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStateRegisterInfo_CmpRule.ProtoReflect.Descriptor instead.
func (*DeviceStateRegisterInfo_CmpRule) Descriptor() ([]byte, []int) {
	return file_api_util_v1_general_proto_rawDescGZIP(), []int{2, 0}
}

func (x *DeviceStateRegisterInfo_CmpRule) GetCmp() DeviceStateRegisterInfo_Cmp {
	if x != nil {
		return x.Cmp
	}
	return DeviceStateRegisterInfo_EQ
}

func (x *DeviceStateRegisterInfo_CmpRule) GetArg() string {
	if x != nil {
		return x.Arg
	}
	return ""
}

// 预警规则信息，预警时依据依据规则定义的比较规则，对指定时间范围内的数据查询，判断是否需要产生警告
type DeviceStateRegisterInfo_WarningRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 预警比较规则，当设置了预警规则，则比较规则不能为空
	CmpRule *DeviceStateRegisterInfo_CmpRule `protobuf:"bytes,1,opt,name=cmp_rule,json=cmpRule,proto3" json:"cmp_rule,omitempty"`
	// 数据聚合操作
	AggregationOperation DeviceStateRegisterInfo_AggregationOperation `protobuf:"varint,2,opt,name=aggregation_operation,json=aggregationOperation,proto3,enum=api.util.v1.DeviceStateRegisterInfo_AggregationOperation" json:"aggregation_operation,omitempty"`
	// 指定的时间范围，必须设置时间范围
	Duration *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *DeviceStateRegisterInfo_WarningRule) Reset() {
	*x = DeviceStateRegisterInfo_WarningRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_util_v1_general_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStateRegisterInfo_WarningRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStateRegisterInfo_WarningRule) ProtoMessage() {}

func (x *DeviceStateRegisterInfo_WarningRule) ProtoReflect() protoreflect.Message {
	mi := &file_api_util_v1_general_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStateRegisterInfo_WarningRule.ProtoReflect.Descriptor instead.
func (*DeviceStateRegisterInfo_WarningRule) Descriptor() ([]byte, []int) {
	return file_api_util_v1_general_proto_rawDescGZIP(), []int{2, 1}
}

func (x *DeviceStateRegisterInfo_WarningRule) GetCmpRule() *DeviceStateRegisterInfo_CmpRule {
	if x != nil {
		return x.CmpRule
	}
	return nil
}

func (x *DeviceStateRegisterInfo_WarningRule) GetAggregationOperation() DeviceStateRegisterInfo_AggregationOperation {
	if x != nil {
		return x.AggregationOperation
	}
	return DeviceStateRegisterInfo_AVG
}

func (x *DeviceStateRegisterInfo_WarningRule) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

// 设备状态信息注册字段
type DeviceStateRegisterInfo_Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 配置设备状态信息的字段名，长度为1到12位的小写字母加数字以及_组成的字符串
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 设备状态信息字段类型
	Type Type `protobuf:"varint,2,opt,name=type,proto3,enum=api.util.v1.Type" json:"type,omitempty"`
	// 预警规则
	WarningRule *DeviceStateRegisterInfo_WarningRule `protobuf:"bytes,3,opt,name=warning_rule,json=warningRule,proto3" json:"warning_rule,omitempty"`
}

func (x *DeviceStateRegisterInfo_Field) Reset() {
	*x = DeviceStateRegisterInfo_Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_util_v1_general_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStateRegisterInfo_Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStateRegisterInfo_Field) ProtoMessage() {}

func (x *DeviceStateRegisterInfo_Field) ProtoReflect() protoreflect.Message {
	mi := &file_api_util_v1_general_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStateRegisterInfo_Field.ProtoReflect.Descriptor instead.
func (*DeviceStateRegisterInfo_Field) Descriptor() ([]byte, []int) {
	return file_api_util_v1_general_proto_rawDescGZIP(), []int{2, 2}
}

func (x *DeviceStateRegisterInfo_Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceStateRegisterInfo_Field) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_DOUBLE
}

func (x *DeviceStateRegisterInfo_Field) GetWarningRule() *DeviceStateRegisterInfo_WarningRule {
	if x != nil {
		return x.WarningRule
	}
	return nil
}

var File_api_util_v1_general_proto protoreflect.FileDescriptor

var file_api_util_v1_general_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69,
	0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6a, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16,
	0x72, 0x14, 0x10, 0x03, 0x18, 0x0c, 0x32, 0x0e, 0x5e, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x5f, 0x5d, 0x2b, 0x29, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42,
	0x18, 0x72, 0x16, 0x10, 0x06, 0x18, 0x0c, 0x32, 0x10, 0x5e, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x29, 0x24, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x06, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x1a, 0x5d, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x10,
	0x01, 0x18, 0x0c, 0x32, 0x0e, 0x5e, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x5d,
	0x2b, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x83, 0x06, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04,
	0x08, 0x01, 0x10, 0x06, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x6a, 0x0a, 0x07,
	0x43, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6d, 0x70, 0x52, 0x03,
	0x63, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0xfa, 0x42, 0x0e, 0x72, 0x0c, 0x32, 0x0a, 0x5e, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d,
	0x2b, 0x29, 0x24, 0x52, 0x03, 0x61, 0x72, 0x67, 0x1a, 0x91, 0x02, 0x0a, 0x0b, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x63, 0x6d, 0x70, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x43, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x6e, 0x0a, 0x15, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xaa, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb2, 0x01, 0x0a,
	0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x10, 0x01, 0x18, 0x0c, 0x32,
	0x0e, 0x5e, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x5d, 0x2b, 0x29, 0x24, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x0c,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c,
	0x65, 0x22, 0x1d, 0x0a, 0x03, 0x43, 0x6d, 0x70, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x02,
	0x22, 0x44, 0x0a, 0x14, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x56, 0x47, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49,
	0x4e, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x22, 0xd9, 0x02, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x1a, 0x02, 0x28, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x11, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x22, 0x3c, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xa9, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2a, 0x7b, 0x0a, 0x0b,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x1b, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4e,
	0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x00, 0x1a, 0x04, 0xa8, 0x45,
	0x90, 0x03, 0x12, 0x22, 0x0a, 0x18, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41,
	0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x01,
	0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12, 0x1b, 0x0a, 0x11, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x1a, 0x04, 0xa8,
	0x45, 0xf4, 0x03, 0x1a, 0x04, 0xa0, 0x45, 0xf4, 0x03, 0x2a, 0x6f, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x36,
	0x34, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x42,
	0x4f, 0x4f, 0x4c, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x06, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x59, 0x54, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x08, 0x2a, 0x5c, 0x0a, 0x08, 0x4c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57,
	0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x56, 0x5f, 0x50, 0x41, 0x4e, 0x49, 0x43,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x4e, 0x49, 0x43, 0x10, 0x05, 0x12, 0x09, 0x0a,
	0x05, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x42, 0x36, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x65, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x79, 0x75, 0x73, 0x69, 0x72, 0x2f, 0x75, 0x74, 0x69,
	0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_util_v1_general_proto_rawDescOnce sync.Once
	file_api_util_v1_general_proto_rawDescData = file_api_util_v1_general_proto_rawDesc
)

func file_api_util_v1_general_proto_rawDescGZIP() []byte {
	file_api_util_v1_general_proto_rawDescOnce.Do(func() {
		file_api_util_v1_general_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_util_v1_general_proto_rawDescData)
	})
	return file_api_util_v1_general_proto_rawDescData
}

var file_api_util_v1_general_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_api_util_v1_general_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_api_util_v1_general_proto_goTypes = []interface{}{
	(ErrorReason)(0),                 // 0: api.util.v1.ErrorReason
	(Type)(0),                        // 1: api.util.v1.Type
	(LogLevel)(0),                    // 2: api.util.v1.LogLevel
	(DeviceStateRegisterInfo_Cmp)(0), // 3: api.util.v1.DeviceStateRegisterInfo.Cmp
	(DeviceStateRegisterInfo_AggregationOperation)(0), // 4: api.util.v1.DeviceStateRegisterInfo.AggregationOperation
	(*User)(nil),                                // 5: api.util.v1.User
	(*DeviceConfigRegisterInfo)(nil),            // 6: api.util.v1.DeviceConfigRegisterInfo
	(*DeviceStateRegisterInfo)(nil),             // 7: api.util.v1.DeviceStateRegisterInfo
	(*Warning)(nil),                             // 8: api.util.v1.Warning
	(*TestedDeviceConfig)(nil),                  // 9: api.util.v1.TestedDeviceConfig
	(*TestedDeviceState)(nil),                   // 10: api.util.v1.TestedDeviceState
	(*DeviceConfigRegisterInfo_Field)(nil),      // 11: api.util.v1.DeviceConfigRegisterInfo.Field
	(*DeviceStateRegisterInfo_CmpRule)(nil),     // 12: api.util.v1.DeviceStateRegisterInfo.CmpRule
	(*DeviceStateRegisterInfo_WarningRule)(nil), // 13: api.util.v1.DeviceStateRegisterInfo.WarningRule
	(*DeviceStateRegisterInfo_Field)(nil),       // 14: api.util.v1.DeviceStateRegisterInfo.Field
	(*timestamppb.Timestamp)(nil),               // 15: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                 // 16: google.protobuf.Duration
}
var file_api_util_v1_general_proto_depIdxs = []int32{
	11, // 0: api.util.v1.DeviceConfigRegisterInfo.fields:type_name -> api.util.v1.DeviceConfigRegisterInfo.Field
	14, // 1: api.util.v1.DeviceStateRegisterInfo.fields:type_name -> api.util.v1.DeviceStateRegisterInfo.Field
	15, // 2: api.util.v1.Warning.start:type_name -> google.protobuf.Timestamp
	15, // 3: api.util.v1.Warning.end:type_name -> google.protobuf.Timestamp
	15, // 4: api.util.v1.TestedDeviceState.time:type_name -> google.protobuf.Timestamp
	1,  // 5: api.util.v1.DeviceConfigRegisterInfo.Field.type:type_name -> api.util.v1.Type
	3,  // 6: api.util.v1.DeviceStateRegisterInfo.CmpRule.cmp:type_name -> api.util.v1.DeviceStateRegisterInfo.Cmp
	12, // 7: api.util.v1.DeviceStateRegisterInfo.WarningRule.cmp_rule:type_name -> api.util.v1.DeviceStateRegisterInfo.CmpRule
	4,  // 8: api.util.v1.DeviceStateRegisterInfo.WarningRule.aggregation_operation:type_name -> api.util.v1.DeviceStateRegisterInfo.AggregationOperation
	16, // 9: api.util.v1.DeviceStateRegisterInfo.WarningRule.duration:type_name -> google.protobuf.Duration
	1,  // 10: api.util.v1.DeviceStateRegisterInfo.Field.type:type_name -> api.util.v1.Type
	13, // 11: api.util.v1.DeviceStateRegisterInfo.Field.warning_rule:type_name -> api.util.v1.DeviceStateRegisterInfo.WarningRule
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_api_util_v1_general_proto_init() }
func file_api_util_v1_general_proto_init() {
	if File_api_util_v1_general_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_util_v1_general_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_util_v1_general_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConfigRegisterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_util_v1_general_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStateRegisterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_util_v1_general_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Warning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_util_v1_general_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestedDeviceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_util_v1_general_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestedDeviceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_util_v1_general_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConfigRegisterInfo_Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_util_v1_general_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStateRegisterInfo_CmpRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_util_v1_general_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStateRegisterInfo_WarningRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_util_v1_general_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStateRegisterInfo_Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_util_v1_general_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_util_v1_general_proto_goTypes,
		DependencyIndexes: file_api_util_v1_general_proto_depIdxs,
		EnumInfos:         file_api_util_v1_general_proto_enumTypes,
		MessageInfos:      file_api_util_v1_general_proto_msgTypes,
	}.Build()
	File_api_util_v1_general_proto = out.File
	file_api_util_v1_general_proto_rawDesc = nil
	file_api_util_v1_general_proto_goTypes = nil
	file_api_util_v1_general_proto_depIdxs = nil
}
