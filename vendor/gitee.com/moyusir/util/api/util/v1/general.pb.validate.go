// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/util/v1/general.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 3 || l > 12 {
		err := UserValidationError{
			field:  "Id",
			reason: "value length must be between 3 and 12 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_User_Id_Pattern.MatchString(m.GetId()) {
		err := UserValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^([0-9a-z_]+)$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 12 {
		err := UserValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 12 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_User_Password_Pattern.MatchString(m.GetPassword()) {
		err := UserValidationError{
			field:  "Password",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9]+)$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

var _User_Id_Pattern = regexp.MustCompile("^([0-9a-z_]+)$")

var _User_Password_Pattern = regexp.MustCompile("^([a-zA-Z0-9]+)$")

// Validate checks the field values on DeviceConfigRegisterInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceConfigRegisterInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceConfigRegisterInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceConfigRegisterInfoMultiError, or nil if none found.
func (m *DeviceConfigRegisterInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceConfigRegisterInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetFields()); l < 1 || l > 6 {
		err := DeviceConfigRegisterInfoValidationError{
			field:  "Fields",
			reason: "value must contain between 1 and 6 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeviceConfigRegisterInfoValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeviceConfigRegisterInfoValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceConfigRegisterInfoValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeviceConfigRegisterInfoMultiError(errors)
	}

	return nil
}

// DeviceConfigRegisterInfoMultiError is an error wrapping multiple validation
// errors returned by DeviceConfigRegisterInfo.ValidateAll() if the designated
// constraints aren't met.
type DeviceConfigRegisterInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceConfigRegisterInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceConfigRegisterInfoMultiError) AllErrors() []error { return m }

// DeviceConfigRegisterInfoValidationError is the validation error returned by
// DeviceConfigRegisterInfo.Validate if the designated constraints aren't met.
type DeviceConfigRegisterInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceConfigRegisterInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceConfigRegisterInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceConfigRegisterInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceConfigRegisterInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceConfigRegisterInfoValidationError) ErrorName() string {
	return "DeviceConfigRegisterInfoValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceConfigRegisterInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceConfigRegisterInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceConfigRegisterInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceConfigRegisterInfoValidationError{}

// Validate checks the field values on DeviceStateRegisterInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceStateRegisterInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceStateRegisterInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceStateRegisterInfoMultiError, or nil if none found.
func (m *DeviceStateRegisterInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceStateRegisterInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetFields()); l < 1 || l > 6 {
		err := DeviceStateRegisterInfoValidationError{
			field:  "Fields",
			reason: "value must contain between 1 and 6 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeviceStateRegisterInfoValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeviceStateRegisterInfoValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceStateRegisterInfoValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeviceStateRegisterInfoMultiError(errors)
	}

	return nil
}

// DeviceStateRegisterInfoMultiError is an error wrapping multiple validation
// errors returned by DeviceStateRegisterInfo.ValidateAll() if the designated
// constraints aren't met.
type DeviceStateRegisterInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceStateRegisterInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceStateRegisterInfoMultiError) AllErrors() []error { return m }

// DeviceStateRegisterInfoValidationError is the validation error returned by
// DeviceStateRegisterInfo.Validate if the designated constraints aren't met.
type DeviceStateRegisterInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceStateRegisterInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceStateRegisterInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceStateRegisterInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceStateRegisterInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceStateRegisterInfoValidationError) ErrorName() string {
	return "DeviceStateRegisterInfoValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceStateRegisterInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceStateRegisterInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceStateRegisterInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceStateRegisterInfoValidationError{}

// Validate checks the field values on Warning with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Warning) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Warning with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WarningMultiError, or nil if none found.
func (m *Warning) ValidateAll() error {
	return m.validate(true)
}

func (m *Warning) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDeviceClassId() < 0 {
		err := WarningValidationError{
			field:  "DeviceClassId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDeviceId()) < 1 {
		err := WarningValidationError{
			field:  "DeviceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDeviceFieldName()) < 1 {
		err := WarningValidationError{
			field:  "DeviceFieldName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWarningMessage()) < 1 {
		err := WarningValidationError{
			field:  "WarningMessage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStart() == nil {
		err := WarningValidationError{
			field:  "Start",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEnd() == nil {
		err := WarningValidationError{
			field:  "End",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WarningMultiError(errors)
	}

	return nil
}

// WarningMultiError is an error wrapping multiple validation errors returned
// by Warning.ValidateAll() if the designated constraints aren't met.
type WarningMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WarningMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WarningMultiError) AllErrors() []error { return m }

// WarningValidationError is the validation error returned by Warning.Validate
// if the designated constraints aren't met.
type WarningValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WarningValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WarningValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WarningValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WarningValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WarningValidationError) ErrorName() string { return "WarningValidationError" }

// Error satisfies the builtin error interface
func (e WarningValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWarning.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WarningValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WarningValidationError{}

// Validate checks the field values on TestedDeviceConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestedDeviceConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestedDeviceConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestedDeviceConfigMultiError, or nil if none found.
func (m *TestedDeviceConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *TestedDeviceConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return TestedDeviceConfigMultiError(errors)
	}

	return nil
}

// TestedDeviceConfigMultiError is an error wrapping multiple validation errors
// returned by TestedDeviceConfig.ValidateAll() if the designated constraints
// aren't met.
type TestedDeviceConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestedDeviceConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestedDeviceConfigMultiError) AllErrors() []error { return m }

// TestedDeviceConfigValidationError is the validation error returned by
// TestedDeviceConfig.Validate if the designated constraints aren't met.
type TestedDeviceConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestedDeviceConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestedDeviceConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestedDeviceConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestedDeviceConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestedDeviceConfigValidationError) ErrorName() string {
	return "TestedDeviceConfigValidationError"
}

// Error satisfies the builtin error interface
func (e TestedDeviceConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestedDeviceConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestedDeviceConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestedDeviceConfigValidationError{}

// Validate checks the field values on TestedDeviceState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TestedDeviceState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestedDeviceState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestedDeviceStateMultiError, or nil if none found.
func (m *TestedDeviceState) ValidateAll() error {
	return m.validate(true)
}

func (m *TestedDeviceState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestedDeviceStateValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestedDeviceStateValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestedDeviceStateValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Voltage

	// no validation rules for Current

	// no validation rules for Temperature

	if len(errors) > 0 {
		return TestedDeviceStateMultiError(errors)
	}

	return nil
}

// TestedDeviceStateMultiError is an error wrapping multiple validation errors
// returned by TestedDeviceState.ValidateAll() if the designated constraints
// aren't met.
type TestedDeviceStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestedDeviceStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestedDeviceStateMultiError) AllErrors() []error { return m }

// TestedDeviceStateValidationError is the validation error returned by
// TestedDeviceState.Validate if the designated constraints aren't met.
type TestedDeviceStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestedDeviceStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestedDeviceStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestedDeviceStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestedDeviceStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestedDeviceStateValidationError) ErrorName() string {
	return "TestedDeviceStateValidationError"
}

// Error satisfies the builtin error interface
func (e TestedDeviceStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestedDeviceState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestedDeviceStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestedDeviceStateValidationError{}

// Validate checks the field values on DeviceConfigRegisterInfo_Field with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceConfigRegisterInfo_Field) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceConfigRegisterInfo_Field with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeviceConfigRegisterInfo_FieldMultiError, or nil if none found.
func (m *DeviceConfigRegisterInfo_Field) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceConfigRegisterInfo_Field) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 12 {
		err := DeviceConfigRegisterInfo_FieldValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 12 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeviceConfigRegisterInfo_Field_Name_Pattern.MatchString(m.GetName()) {
		err := DeviceConfigRegisterInfo_FieldValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^([0-9a-z_]+)$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if len(errors) > 0 {
		return DeviceConfigRegisterInfo_FieldMultiError(errors)
	}

	return nil
}

// DeviceConfigRegisterInfo_FieldMultiError is an error wrapping multiple
// validation errors returned by DeviceConfigRegisterInfo_Field.ValidateAll()
// if the designated constraints aren't met.
type DeviceConfigRegisterInfo_FieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceConfigRegisterInfo_FieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceConfigRegisterInfo_FieldMultiError) AllErrors() []error { return m }

// DeviceConfigRegisterInfo_FieldValidationError is the validation error
// returned by DeviceConfigRegisterInfo_Field.Validate if the designated
// constraints aren't met.
type DeviceConfigRegisterInfo_FieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceConfigRegisterInfo_FieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceConfigRegisterInfo_FieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceConfigRegisterInfo_FieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceConfigRegisterInfo_FieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceConfigRegisterInfo_FieldValidationError) ErrorName() string {
	return "DeviceConfigRegisterInfo_FieldValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceConfigRegisterInfo_FieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceConfigRegisterInfo_Field.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceConfigRegisterInfo_FieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceConfigRegisterInfo_FieldValidationError{}

var _DeviceConfigRegisterInfo_Field_Name_Pattern = regexp.MustCompile("^([0-9a-z_]+)$")

// Validate checks the field values on DeviceStateRegisterInfo_CmpRule with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceStateRegisterInfo_CmpRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceStateRegisterInfo_CmpRule with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeviceStateRegisterInfo_CmpRuleMultiError, or nil if none found.
func (m *DeviceStateRegisterInfo_CmpRule) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceStateRegisterInfo_CmpRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cmp

	if !_DeviceStateRegisterInfo_CmpRule_Arg_Pattern.MatchString(m.GetArg()) {
		err := DeviceStateRegisterInfo_CmpRuleValidationError{
			field:  "Arg",
			reason: "value does not match regex pattern \"^([0-9]+)$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeviceStateRegisterInfo_CmpRuleMultiError(errors)
	}

	return nil
}

// DeviceStateRegisterInfo_CmpRuleMultiError is an error wrapping multiple
// validation errors returned by DeviceStateRegisterInfo_CmpRule.ValidateAll()
// if the designated constraints aren't met.
type DeviceStateRegisterInfo_CmpRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceStateRegisterInfo_CmpRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceStateRegisterInfo_CmpRuleMultiError) AllErrors() []error { return m }

// DeviceStateRegisterInfo_CmpRuleValidationError is the validation error
// returned by DeviceStateRegisterInfo_CmpRule.Validate if the designated
// constraints aren't met.
type DeviceStateRegisterInfo_CmpRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceStateRegisterInfo_CmpRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceStateRegisterInfo_CmpRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceStateRegisterInfo_CmpRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceStateRegisterInfo_CmpRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceStateRegisterInfo_CmpRuleValidationError) ErrorName() string {
	return "DeviceStateRegisterInfo_CmpRuleValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceStateRegisterInfo_CmpRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceStateRegisterInfo_CmpRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceStateRegisterInfo_CmpRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceStateRegisterInfo_CmpRuleValidationError{}

var _DeviceStateRegisterInfo_CmpRule_Arg_Pattern = regexp.MustCompile("^([0-9]+)$")

// Validate checks the field values on DeviceStateRegisterInfo_WarningRule with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeviceStateRegisterInfo_WarningRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceStateRegisterInfo_WarningRule
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeviceStateRegisterInfo_WarningRuleMultiError, or nil if none found.
func (m *DeviceStateRegisterInfo_WarningRule) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceStateRegisterInfo_WarningRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCmpRule() == nil {
		err := DeviceStateRegisterInfo_WarningRuleValidationError{
			field:  "CmpRule",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCmpRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceStateRegisterInfo_WarningRuleValidationError{
					field:  "CmpRule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceStateRegisterInfo_WarningRuleValidationError{
					field:  "CmpRule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCmpRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceStateRegisterInfo_WarningRuleValidationError{
				field:  "CmpRule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AggregationOperation

	if m.GetDuration() == nil {
		err := DeviceStateRegisterInfo_WarningRuleValidationError{
			field:  "Duration",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeviceStateRegisterInfo_WarningRuleMultiError(errors)
	}

	return nil
}

// DeviceStateRegisterInfo_WarningRuleMultiError is an error wrapping multiple
// validation errors returned by
// DeviceStateRegisterInfo_WarningRule.ValidateAll() if the designated
// constraints aren't met.
type DeviceStateRegisterInfo_WarningRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceStateRegisterInfo_WarningRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceStateRegisterInfo_WarningRuleMultiError) AllErrors() []error { return m }

// DeviceStateRegisterInfo_WarningRuleValidationError is the validation error
// returned by DeviceStateRegisterInfo_WarningRule.Validate if the designated
// constraints aren't met.
type DeviceStateRegisterInfo_WarningRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceStateRegisterInfo_WarningRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceStateRegisterInfo_WarningRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceStateRegisterInfo_WarningRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceStateRegisterInfo_WarningRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceStateRegisterInfo_WarningRuleValidationError) ErrorName() string {
	return "DeviceStateRegisterInfo_WarningRuleValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceStateRegisterInfo_WarningRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceStateRegisterInfo_WarningRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceStateRegisterInfo_WarningRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceStateRegisterInfo_WarningRuleValidationError{}

// Validate checks the field values on DeviceStateRegisterInfo_Field with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceStateRegisterInfo_Field) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceStateRegisterInfo_Field with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeviceStateRegisterInfo_FieldMultiError, or nil if none found.
func (m *DeviceStateRegisterInfo_Field) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceStateRegisterInfo_Field) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 12 {
		err := DeviceStateRegisterInfo_FieldValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 12 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeviceStateRegisterInfo_Field_Name_Pattern.MatchString(m.GetName()) {
		err := DeviceStateRegisterInfo_FieldValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^([0-9a-z_]+)$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetWarningRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceStateRegisterInfo_FieldValidationError{
					field:  "WarningRule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceStateRegisterInfo_FieldValidationError{
					field:  "WarningRule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWarningRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceStateRegisterInfo_FieldValidationError{
				field:  "WarningRule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeviceStateRegisterInfo_FieldMultiError(errors)
	}

	return nil
}

// DeviceStateRegisterInfo_FieldMultiError is an error wrapping multiple
// validation errors returned by DeviceStateRegisterInfo_Field.ValidateAll()
// if the designated constraints aren't met.
type DeviceStateRegisterInfo_FieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceStateRegisterInfo_FieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceStateRegisterInfo_FieldMultiError) AllErrors() []error { return m }

// DeviceStateRegisterInfo_FieldValidationError is the validation error
// returned by DeviceStateRegisterInfo_Field.Validate if the designated
// constraints aren't met.
type DeviceStateRegisterInfo_FieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceStateRegisterInfo_FieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceStateRegisterInfo_FieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceStateRegisterInfo_FieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceStateRegisterInfo_FieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceStateRegisterInfo_FieldValidationError) ErrorName() string {
	return "DeviceStateRegisterInfo_FieldValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceStateRegisterInfo_FieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceStateRegisterInfo_Field.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceStateRegisterInfo_FieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceStateRegisterInfo_FieldValidationError{}

var _DeviceStateRegisterInfo_Field_Name_Pattern = regexp.MustCompile("^([0-9a-z_]+)$")
