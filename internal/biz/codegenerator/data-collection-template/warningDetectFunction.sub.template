{{/* 预定义的，故障预警相关服务函数的子模板，包括grpc的服务函数和go service层的函数 */}}

{{/* go函数部分 */}}

{{/* 定义创建设备状态流函数的模板，需要注入DeviceClassID
// CreateStateInfoSaveStream 创建传输设备状态信息的数据流
// 程序会优先使用请求头中包含的clientID进行路由信息的创建，
// 当请求头中不包含clientID时，则会重新建立一个clientID。
// 本次数据流中使用的clientID会通过响应头发送给客户端
*/}}
{{define "CreateStateInfoSaveStream" -}}
func (s *WarningDetectService) CreateStateInfoSaveStream{{.DeviceClassID}}(conn pb.WarningDetect_CreateStateInfoSaveStream{{.DeviceClassID}}Server) error {
	var (
		clientID string
		// 设备类别号，代码生成时注入
		deviceClassID = {{.DeviceClassID}}
		// 设备预警字段，代码生成时注入
		fields = map[string]float64{
		{{range .Fields -}}
			"{{camelCase .Name}}": 0,
        {{- end}}
		}
	)

	// 检查请求头中是否包含clientID
	md, ok := metadata.FromIncomingContext(conn.Context())
	if value := md.Get(CLIENT_ID_HEADER); ok && len(value) != 0 {
		clientID = value[0]
	} else {
		// 若请求头中不存在，则分配clientID，通过响应头并发送给客户端
		// 利用uuid作为clientID，使用的uuid version1
		uid, err := uuid.NewUUID()
		if err != nil {
			clientID = fmt.Sprintf("%s%d", conf.Username, time.Now().Unix())
		} else {
			clientID = uid.String()
		}
	}

	// 将clientID存放到响应头中发送
	md = metadata.New(map[string]string{CLIENT_ID_HEADER: clientID})
	// TODO 考虑错误处理
	if err := conn.SendHeader(md); err != nil {
		return err
	}

	for {
		state, err := conn.Recv()
		if err == io.EOF {
			return nil
		}
		if err != nil {
			return err
		}

		// 提取设备状态信息进行路由激活以及保存
		info := &biz.DeviceGeneralInfo{DeviceClassID: deviceClassID}
		info.DeviceID = state.Id

    {{range .Fields}}
         fields["{{camelCase .Name}}"] = state.{{camelCase .Name}}
    {{end}}

		// TODO 考虑路由激活以及保存设备状态出错时如何处理
		err = s.manager.ActivateRoute(clientID, info)
		if err != nil {
			return err
		}
		err = s.uc.SaveDeviceState(info, state, fields)
		if err != nil {
			return err
		}

		err = conn.Send(&pb.WarningDetectServiceReply{Success: true})
		if err != nil {
			return err
		}
	}
}
{{- end}}

{{/* grpc服务部分 */}}

{{/* 创建设备状态保存流函数的服务定义模板，需要注入DeviceClassID
// 设备状态信息收集服务
*/}}
{{define "CreateStateInfoSaveStreamProto" -}}
rpc CreateStateInfoSaveStream{{.DeviceClassID}}(stream DeviceState{{.DeviceClassID}}) returns (stream WarningDetectServiceReply);
{{- end}}